//Joseph May 3557

package org.csc133.a1;

import static com.codename1.ui.CN.*;

import com.codename1.charts.util.ColorUtil;
import com.codename1.maps.BoundingBox;
import com.codename1.maps.Coord;
import com.codename1.system.Lifecycle;
import com.codename1.ui.*;
import com.codename1.ui.geom.Point;
import com.codename1.ui.layouts.*;
import com.codename1.io.*;
import com.codename1.ui.plaf.*;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;

import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Random;
// TODO: 2/11/2022 implement the buttons 
/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class AppMain extends Lifecycle {
    @Override
    public void runApp() {
        new Game();
    }
}
class Game extends Form implements Runnable{
    GameWorld gw;

    final static int DISP_H = Display.getInstance().getDisplayHeight();
    final static int DISP_W = Display.getInstance().getDisplayWidth();

    public static int getSmallDim() {return Math.min(DISP_H,DISP_W);}
    public static int getLargeDim() {return Math.max(DISP_H,DISP_W);}

    public Game(){
        gw = new GameWorld();

        addKeyListener(-93,(evt) -> gw.move('l')); //left
        addKeyListener(-94,(evt) -> gw.move('r')); //right
        addKeyListener(-91,(evt) -> gw.move('u')); //up
        addKeyListener(-92,(evt) -> gw.move('d')); //down
        addKeyListener('f',(evt) -> gw.checkFire());
        addKeyListener('d',(evt) -> gw.drain());
        addKeyListener('Q',(evt) -> gw.quit());

        UITimer timer = new UITimer(this);
        timer.schedule(100,true,this);

        this.getAllStyles().setBgColor(ColorUtil.BLACK);
        this.show();
    }

    @Override
    public void run() {
        gw.tick();
        repaint();
    }
    public void paint (Graphics g){
        super.paint(g);
        gw.draw(g);
    }
}
class GameWorld{
    final int NUMBER_OF_FIRES = 3;
    private boolean drain = false;
    private River river;
    private Helipad helipad;
    private ArrayList<Fire> fires;
    private ArrayList<Fire> deadFires;
    private Helicopter helicopter;

    public GameWorld(){
        init();
    }
    private void init(){
        river = new River();
        helipad = new Helipad();
        fires = new ArrayList<>();
        deadFires = new ArrayList<>();
        int fVarX = Display.getInstance().getDisplayWidth()/15;
        int fVarY = Display.getInstance().getDisplayHeight()/15;
        Fire fire1 = new Fire(new Point(new Random().nextInt(fVarX)+fVarX,
                new Random().nextInt(fVarY)+fVarY));
        Fire fire2 = new Fire(new Point(new Random().nextInt(fVarX)+ Display.getInstance().getDisplayWidth()/2+
                Display.getInstance().getDisplayWidth()/10,
                new Random().nextInt(fVarY)+fVarY));
        Fire fire3 = new Fire(new Point(new Random().nextInt(fVarX)+
                Display.getInstance().getDisplayWidth()/3+Display.getInstance().getDisplayWidth()/30,
                new Random().nextInt(fVarY)+
                        (Display.getInstance().getDisplayHeight()*2)/5));
        fires.add(fire1); fires.add(fire2); fires.add(fire3);
        helicopter = new Helicopter(helipad.getCenter());
        helicopter.setFuel(30000);
    }
    public void quit(){
        Display.getInstance().exitApplication();
    }

    void draw(Graphics g){
        g.setFont(Font.createSystemFont(FACE_MONOSPACE, STYLE_BOLD, SIZE_LARGE));
        river.draw(g);
        helipad.draw(g);
        for(Fire fire : fires){
            fire.draw(g);
        }
        helicopter.draw(g);
    }

    public void tick() {
        helicopter.move();
        if (helicopter.getSpeed() > 2){
            drain = false;
        } else if (river.checkDrain(helicopter.getCenter()) && drain){
            helicopter.drainWater();
        } else {
            drain = false;
        }

        for(Fire fire : fires){
            if (fire.checkSize()){
                deadFires.add(fire);
            }
            fire.grow();
        }
        fires.removeAll(deadFires);
        helicopter.drainFuel(-5);
        if (helicopter.checkFuel()){

        }
    }
    public void move(char c){
        switch (c) {
            case 'u':
                helicopter.speedUp();
            break;
            case 'd':
                helicopter.speedDown();
            break;
            case 'l':
                helicopter.changeDirection(-Math.PI/6.0);
            break;
            case 'r':
                helicopter.changeDirection(Math.PI/6.0);
            break;
        }
    }
    public void checkFire() {
        for (Fire fire : fires) {
            if (helicopter.getWater() > 0) {
                helicopter.fireWater(fire.shrink(helicopter.getCenter(), helicopter.getWater(), helicopter.getSpeed()));
            }
        }
        drain = false;
    }

    public void drain(){
        drain = true;
    }
}
class River{
    private Point location;
    private int height, width;

    public River(){
        location = new Point(Display.getInstance().getDisplayWidth()/100,Display.getInstance().getDisplayHeight()/3);
        height = Display.getInstance().getDisplayHeight()/12;
        width = Display.getInstance().getDisplayWidth()-location.getX()*2;
    }

    public boolean checkDrain(Point heli){
        if (location.getX() < heli.getX() && location.getX()+width > heli.getX()
        && location.getY() < heli.getY() && location.getY()+height > heli.getY()){
            return true;
        } else {
            return false;
        }
    }

    public Point getLocation() {return location;}

    void draw(Graphics g){
        g.setColor(ColorUtil.BLUE);
        g.drawRect(location.getX(),location.getY(),width,height);
    }
}
class Helipad{
    //separated variables for the square and circle to make it easier
    private Point locationS, locationC, center;
    private int square, circle;

    public Helipad(){
        locationS = new Point(Display.getInstance().getDisplayWidth()/2-
                Display.getInstance().getDisplayWidth()/20,Display.getInstance().getDisplayHeight()-
                Display.getInstance().getDisplayHeight()/5);
        square = Display.getInstance().getDisplayWidth()-locationS.getX()*2;
        circle = square-square/5;
        locationC = new Point(locationS.getX()+square/10,
                              locationS.getY()+square/10);
        center = new Point(locationC.getX()+circle/2,
                           locationC.getY()+circle/2);

    }

    public Point getCenter(){
        return center;
    }

    void draw(Graphics g){
        g.setColor(ColorUtil.GRAY);
        g.drawRect(locationS.getX(),locationS.getY(),square,square,5);
        g.drawArc(locationC.getX(),locationC.getY(),circle,circle,0,360);
    }
}
class Fire{
    private Point location;
    private int size, maxSize, tooSmall, growth;

    public Fire(Point location){
        this.location = location;
        maxSize = (Display.getInstance().getDisplayHeight()+Display.getInstance().getDisplayWidth())/9;
        size = new Random().nextInt(maxSize/5)+(maxSize*4)/5;
        growth = maxSize/70;
        tooSmall = growth * 10;
    }
    public void grow(){
        if (size > 0) {
            if (new Random().nextInt(40) == 0) {
                size += growth;
                location.setX(location.getX() - growth / 2); //keeps it centered
                location.setY(location.getY() - growth / 2);
            }
        }
    }
    //todo pass water, return to reduce water
    public int shrink(Point heli, int water, int speed){
        boolean close = false; //detects if the helicopter is close to a small fire
        if (size <= tooSmall && (Math.abs(heli.getX() - location.getX()) <= tooSmall/2 ||
                (Math.abs(heli.getY()) - location.getY()) < tooSmall/2)){
            close = true;
        }
        if (speed <= 2 && (location.getX() < heli.getX() && location.getX()+size > heli.getX()
        && location.getY() < heli.getY() && location.getY()+size > heli.getY() || close)){
            int shrinkFactor = (water*growth)/100;
            if (size > shrinkFactor) {
                size -= shrinkFactor;
                location.setX(location.getX()+shrinkFactor/2); //keeps it centered
                location.setY(location.getY()+shrinkFactor/2);
            } else {
                size = 0;
            }
            return 0;
        } else {
            return water;
        }
    }

    public boolean checkSize(){
        if (size <= 0){
            return true;
        } else {
            return false;
        }
    }
    public Point getLocation() {return location;}

    void draw(Graphics g){
        if (size > 0) {
            g.setColor(ColorUtil.MAGENTA);
            g.fillArc(location.getX(), location.getY(), size, size, 0, 360);
            g.drawString(""+size,location.getX()+size,location.getY()+size);
        }
    }
}
class Helicopter{
    private Point init, location, center, lineEnd;
    private int size, length, fuel, water, speed, maxSpeed, maxWater;
    private double heading;

    public Helicopter(Point helipad){
        water = 0;
        fuel = 100;
        speed = 0;
        maxSpeed = 10;
        maxWater = 1000;
        heading = 0.0;
        size = Display.getInstance().getDisplayWidth()/40;
        init = new Point(helipad.getX()-size/2,helipad.getY()-size/3);
        length = size*2;
        location = init;
        center = new Point(location.getX()+size/2,location.getY()+size/2);
        lineEnd = new Point((int) (length * Math.sin(heading)) + center.getX(),
                (int) (length * (-Math.cos(heading))) + center.getY());
    }

    public Point getLocation(){return location;}
    public Point getCenter(){return center;}
    public int getWater(){return water;}
    public int getSpeed(){return speed;}

    public void changeFuel(int fuel){
        this.fuel += fuel;
    }
    public void setFuel(int fuel){this.fuel = fuel;}
    public boolean checkFuel(){
        if (fuel <= 0)
            return true;
        else
            return false;
    }

    public void drainFuel(int drain){
        fuel += drain * (speed + 1);
    }

    public void drainWater(){
        if (water < maxWater && speed <=2) {
            water += 100;
        }
    }
    public void fireWater(int water){
        this.water = water;
    }

    public void speedUp(){
        if (speed < maxSpeed) speed++;
    }
    public void speedDown(){
        if (speed > 0) speed--;
    }
    public void changeDirection(double heading){
        this.heading += heading;
        lineEnd = new Point((int) (length * Math.sin(this.heading)) + center.getX(),
                (int) (length * (-Math.cos(this.heading))) + center.getY());
    }
    public void move(){
        if (location.getX() < 0) {
            location.setX(size / 2);
            center.setX(location.getX()+size/2);
            lineEnd.setX((int) (length * Math.sin(heading)) + center.getX());
        } else if (location.getX() + size > Display.getInstance().getDisplayWidth()){
            location.setX(Display.getInstance().getDisplayWidth() - size);
            center.setX(location.getX()+size/2);
            lineEnd.setX((int) (length * Math.sin(heading)) + center.getX());
        } else {
            int movX = (((center.getX()-lineEnd.getX())/40)*speed);
            location.setX(location.getX()-movX);
            center.setX(center.getX()-movX);
            lineEnd.setX(lineEnd.getX()-movX);
        }

        if (location.getY() < 0) {
            location.setY(size / 4);
            center.setY(location.getY()+size/2);
            lineEnd.setY((int) (length * (-Math.cos(heading))) + center.getY());
        } else if (location.getY() + size > Display.getInstance().getDisplayHeight()) {
            location.setY(Display.getInstance().getDisplayHeight() - size);
            center.setY(location.getY()+size/2);
            lineEnd.setY((int) (length * (-Math.cos(heading))) + center.getY());
        } else {
            int movY = (((center.getY() - lineEnd.getY()) / 40) * speed);
            location.setY(location.getY() - movY);
            center.setY(center.getY() - movY);
            lineEnd.setY(lineEnd.getY() - movY);
        }
    }

    void draw(Graphics g){
        g.setColor(ColorUtil.YELLOW);
        g.fillArc(location.getX(),location.getY(),size,size,0,360);
        g.drawLine(center.getX(),center.getY(),lineEnd.getX(),lineEnd.getY());

        g.drawString("F  : "+fuel,location.getX()+size/2,location.getY()+size*2);
        g.drawString("W  : "+water,location.getX()+size/2,location.getY()+size*3);
    }
}